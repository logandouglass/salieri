About
#=====
Update 8/30/2022
Version 0.1 A

Salieri is a music composition tool that allows users to create their own customizable music clips as downloadable MIDI.  
You don't need to play an instrument or read traditional notation, and there's no fee.  (It does help to know some basic music terminology.  But my hope is to keep the knowledge barrier as low as possible, and there's no harm in experimenting even if you've never played a note in your life.)

Salieri is in very early development.  The present version is a demo that was thrown together in about a month as a project for PDX Code Guild.  It is my first fullstack web app, utilizing home-brewed python algorithms on the backend to generate the musical figures.  

Right now, Salieri's functionality is limited, but it is capable of writing simple accompaniment and complex, customizable arpeggios.  Already the app is a useful tool for creating your own jam session MIDI, or for creating musical setpieces you can import and manipulate in popular programs like Ableton.

In time, I am planning on drastically expanding the range and sophistication of Salieri's music writing algorithms.  Check back over time to see the project grow.

You can find the code for Salieri in my Github repository (link below).  Feel free to contact me if you're curious about the project or looking to collaborate.

https://github.com/logandouglass/pdxcapstone
logandouglass@gmail.com






Instructions
#=====

The Basic Process

There are two main phases to using Salieri.

Phase I: Title and Progression

Create a chord progression and title your composition.  In the demo version, you can create a progression up to five chords long.

Parameters
Tonic - sets what note the chord is based (ex: C) 
Quality - sets what varietys of chord to employ (ex: major)
Bars - sets how long the chord will linger

Phase II: Tracks

Add and style tracks that follow the user-input progression.

Parameters

Style - sets what kind of musical figure will be played over a chord (ex: arpeggio)
Denominator - sets what length of note will play a starring role in the musical figure (ex: 4)
Mutators - applies various changes to the musical figure, depending which mutators are entered (ex: bassify1)







Mutators 

bassify1, bassify2, bassify3 -- apparently not, come back to these

invert1, invert2

o1, o2, o3

reverse

reach1, reach2, reach3

linger2, linger3, linger4, linger5, linger6, linger7, linger8












@!#$@!#$@!$@!$@!$@!#




















!@#$!@#$!@#$!@#$!@#$
























Dedication

